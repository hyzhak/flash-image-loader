<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:imageuploader="org.hyzhak.imageuploader.*"
               creationComplete="onCreationComplete(event)"
               addedToStage="onAddedToStage(event)">
    <fx:Script><![CDATA[
        import mx.events.FlexEvent;

        import org.hyzhak.imageuploader.PostBytesCommand;

        [Bindable]
        public var loading:int = 0;

        [Bindable]
        public var imageUrl:String = "";

        [Bindable]
        public var inProgressImageUrl:String;

        [Bindable]
        public var defaultImageUrl:String;

        [Bindable]
        public var imageData:Bitmap;

        [Bindable]
        public var useGifForProgressImage:Boolean = false;

        [Bindable]
        public var uploadButtonIsVisible:Boolean = false;

        public var postUrl:String;

        public var postTemplate:String;

        //Handlers
        public var fetchCompleteHandler:String;

        public var pushCompleteHandler:String;

        public var userUploadImageHandler:String;

        public var errorHandler:String;

        private var _fileReference:FileReference;

        private var _loader:Loader;

        [Bindable]
        public var types:Array = [
            new FileFilter("Images (*.png;*.jpg;*.gif)", "*.png;*.jpg;*.gif")
        ];

        private function onCreationComplete(event:FlexEvent):void {
            imageUrlImage.addEventListener("sourceChanged", onImageSourceChange);
            imageUrlImage.addEventListener(FlexEvent.READY, onImageReady);
        }

        private function onAddedToStage(event:Event):void {
            Security.allowDomain("*");
            fetchFlashVars();
            updateUseGifForProgressImage();
            gifPlayerComponent.addEventListener(Event.COMPLETE, onGifCompleteUpdate);
            ExternalInterface.addCallback("fetch", fetch);
            ExternalInterface.addCallback("push", push);
        }

        private function onGifCompleteUpdate(event:Event):void {
            updateUseGifForProgressImage();
        }

        private function onChangeInProgressImageUrl(event:Event):void {
            updateUseGifForProgressImage();
        }

        private function updateUseGifForProgressImage():void {
            useGifForProgressImage = gifPlayerComponent.isGif();
            /*
             if (inProgressImageUrl == null || inProgressImageUrl.length <= 4 || inProgressImageUrl.toLowerCase().lastIndexOf(".gif") != inProgressImageUrl.length - 4) {
             useGifForProgressImage = false;
             } else {
             useGifForProgressImage = true;
             setTimeout(function ():void {
             trace("gifPlayerComponent.visible", gifPlayerComponent.visible);
             }, 1000);
             }
             */
        }

        private function fetch(url:String):void {
            if (url == null || url == undefined) {
                var tmpUrl:String = imageUrl;
                imageUrl = "";
                imageUrl = tmpUrl;
            } else {
                imageUrl = url;
            }

            ExternalInterface.call(fetchCompleteHandler);
        }

        private function fetchFlashVars():void {
            for (var key in loaderInfo.parameters) {
                if (hasOwnProperty(key)) {
                    this[key] = loaderInfo.parameters[key];
                }
            }
        }

        private function onClick(event:MouseEvent):void {
            _fileReference = new FileReference();

            try {
                _fileReference.browse(types);
            } catch (e:Error) {
                ExternalInterface.call(errorHandler, {
                    errorID: e.errorID,
                    text: e.message
                })
            }

            startListenFileReference();
        }

        private function startListenFileReference():void {
            _fileReference.addEventListener(Event.SELECT, onSelectFile)
            _fileReference.addEventListener(Event.COMPLETE, onComplete);
            _fileReference.addEventListener(Event.CANCEL, onCancel);
            _fileReference.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            _fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
            _fileReference.addEventListener(ProgressEvent.PROGRESS, onProgress);
        }

        private function stopListenFileReference():void {
            _fileReference.removeEventListener(Event.SELECT, onSelectFile)
            _fileReference.removeEventListener(Event.COMPLETE, onComplete);
            _fileReference.removeEventListener(Event.CANCEL, onCancel);
            _fileReference.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
            _fileReference.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
            _fileReference.removeEventListener(ProgressEvent.PROGRESS, onProgress);
        }

        private function onCancel(event:Event):void {
            trace("onCancel");
            stopListenFileReference();
        }

        private function onIOError(event:IOErrorEvent):void {
            stopProgressAnimation();
            stopListenFileReference();
        }

        private function onSecurityError(event:SecurityErrorEvent):void {
            stopProgressAnimation();
            stopListenFileReference();
        }

        private function onSelectFile(event:Event):void {
            startProgressAnimation();
            _fileReference.load();
        }

        private function onProgress(event:ProgressEvent):void {
            trace("onProgress");
        }

        private function onComplete(event:Event):void {
            stopListenFileReference();

            try {
                _loader = new Loader();
                startListenLoader(_loader.contentLoaderInfo);
                _loader.loadBytes(_fileReference.data);
            } catch (e:Error) {
                ExternalInterface.call(errorHandler, {
                    errorID: e.errorID,
                    text: e.message
                });
            }
        }

        private function startListenLoader(loaderInfo:LoaderInfo):void {
            loaderInfo.addEventListener(Event.COMPLETE, onCompleteConvertToBitmap);
            loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOErrorConvertToBitmap);
        }

        private function onIOErrorConvertToBitmap(event:IOErrorEvent):void {
            stopListenLoader(loaderInfo);
            stopProgressAnimation();
        }

        private function stopListenLoader(loaderInfo:LoaderInfo):void {
            loaderInfo.removeEventListener(Event.COMPLETE, onCompleteConvertToBitmap);
            loaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOErrorConvertToBitmap);
        }

        private function onCompleteConvertToBitmap(event:Event):void {
            var loaderInfo:LoaderInfo = (event.target as LoaderInfo);
            stopListenLoader(loaderInfo);

            //LoaderInfo/get content(
            //SecurityError: Error #2148
            imageData = loaderInfo.content as Bitmap;
            ExternalInterface.call(userUploadImageHandler, {
                creationDate: _fileReference.creationDate,
                creator: _fileReference.creator,
                modificationDate: _fileReference.modificationDate,
                size: _fileReference.size,
                type: _fileReference.type,
                name: _fileReference.name
            });
            stopProgressAnimation();
        }

        private function startProgressAnimation():void {
            loading++;
        }

        private function stopProgressAnimation():void {
            loading--;
        }

        private function push():void {
            if (imageData == null) {
                return;
            }

            startProgressAnimation();
            PostBytesCommand.execute(postUrl, postTemplate, id, imageData.bitmapData.getPixels(imageData.bitmapData.rect))
                    .then(onPushOk, onPushError);
        }

        private function onPushOk(value:*):void {
            stopProgressAnimation();
            ExternalInterface.call(pushCompleteHandler, {
                error: 0
            });
        }

        private function onPushError(value:Object):void {
            stopProgressAnimation();
            ExternalInterface.call(pushCompleteHandler, {
                error: value.errorID,
                text: value.text
            });
        }

        private function onImageSourceChange(event:Event):void {
            startProgressAnimation();
        }

        private function onImageReady(event:Event):void {
            stopProgressAnimation();
        }
        ]]></fx:Script>
    <s:Group left="0" right="0" top="0" bottom="0">
        <s:Group visible="{loading}" horizontalCenter="0" verticalCenter="0">
            <s:layout>
                <s:BasicLayout/>
            </s:layout>

            <s:Image visible="{!useGifForProgressImage}" source="{inProgressImageUrl}" left="0" right="0" top="0" bottom="0"/>
            <imageuploader:GIFPlayerComponent id="gifPlayerComponent" visible="{useGifForProgressImage}" source="{inProgressImageUrl}" horizontalCenter="0" verticalCenter="0"/>
        </s:Group>
        <!--<s:Group left="0" right="0" top="0" bottom="0">-->
        <s:Group visible="{!loading}" left="0" right="0" top="0" bottom="0">
            <s:Image id="imageUrlImage" visible="{imageData == null}" source="{imageUrl}" click="onClick(event)" left="0" right="0" top="0" bottom="0"/>
            <s:Image visible="{imageData != null}" source="{imageData}" click="onClick(event)" left="0" right="0" top="0" bottom="0"/>
        </s:Group>
    </s:Group>
    <s:Button visible="{uploadButtonIsVisible}" label="upload" click="push()"></s:Button>
</s:Application>