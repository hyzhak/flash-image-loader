<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
               addedToStage="onCreationComplete(event)">
    <fx:Script><![CDATA[
        [Bindable]
        public var loading:Boolean = false;

        [Bindable]
        public var imageUrl:String = "";

        [Bindable]
        public var inProgressImageUrl:String;

        [Bindable]
        public var defaultImageUrl:String;

        [Bindable]
        public var imageData:Bitmap;

        public var fetchCompleteHandler:String;

        public var pushCompleteHandler:String;

        private var _fileReference:FileReference;

        private var _loader:Loader;

        [Bindable]
        public var types:Array = [
            new FileFilter("image", "*.png;*.jpg;*.gif")
        ];

        private function onCreationComplete(event:Event):void {
            fetchFlashVars();
            ExternalInterface.addCallback("fetch", fetch);
            ExternalInterface.addCallback("push", push);
        }

        private function fetch(url:String):void {
            if (url == null || url == undefined) {
                var tmpUrl:String = imageUrl;
                imageUrl = "";
                imageUrl = tmpUrl;
            } else {
                imageUrl = url;
            }

            ExternalInterface.call(fetchCompleteHandler);
        }

        private function push():void {
            //TODO:
            ExternalInterface.call(pushCompleteHandler);
        }

        private function fetchFlashVars():void {
            for (var key in loaderInfo.parameters) {
                if (hasOwnProperty(key)) {
                    this[key] = loaderInfo.parameters[key];
                }
            }
        }

        private function onClick(event:MouseEvent):void {
            _fileReference = new FileReference();
            _fileReference.browse();
            startListenFileReference();
        }

        private function startListenFileReference():void {
            _fileReference.addEventListener(Event.SELECT, onSelectFile)
            _fileReference.addEventListener(Event.COMPLETE, onComplete);
            _fileReference.addEventListener(Event.CANCEL, onCancel);
            _fileReference.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            _fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
            _fileReference.addEventListener(ProgressEvent.PROGRESS, onProgress);
        }

        private function stopListenFileReference():void {
            _fileReference.removeEventListener(Event.SELECT, onSelectFile)
            _fileReference.removeEventListener(Event.COMPLETE, onComplete);
            _fileReference.removeEventListener(Event.CANCEL, onCancel);
            _fileReference.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
            _fileReference.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
            _fileReference.removeEventListener(ProgressEvent.PROGRESS, onProgress);
        }

        private function onCancel(event:Event):void {
            trace("onCancel");
            stopListenFileReference();
        }

        private function onIOError(event:IOErrorEvent):void {
            stopProgressAnimation();
            stopListenFileReference();
        }

        private function onSecurityError(event:SecurityErrorEvent):void {
            stopProgressAnimation();
            stopListenFileReference();
        }

        private function onSelectFile(event:Event):void {
            startProgressAnimation();
            _fileReference.load();
        }

        private function onProgress(event:ProgressEvent):void {
            trace("onProgress");
        }

        private function onComplete(event:Event):void {
            stopListenFileReference();

            _loader = new Loader();
            startListenLoader(_loader.contentLoaderInfo);
            _loader.loadBytes(_fileReference.data);
        }

        private function startListenLoader(loaderInfo:LoaderInfo):void {
            loaderInfo.addEventListener(Event.COMPLETE, onCompleteConvertToBitmap);
            loaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOErrorConvertToBitmap);
        }

        private function onIOErrorConvertToBitmap(event:IOErrorEvent):void {
            stopListenLoader(loaderInfo);
            stopProgressAnimation();
        }

        private function stopListenLoader(loaderInfo:LoaderInfo):void {
            loaderInfo.removeEventListener(Event.COMPLETE, onCompleteConvertToBitmap);
            loaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOErrorConvertToBitmap);
        }

        private function onCompleteConvertToBitmap(event:Event):void {
            var loaderInfo:LoaderInfo = (event.target as LoaderInfo);
            stopListenLoader(loaderInfo);
            stopProgressAnimation()

            imageData = loaderInfo.content as Bitmap;
        }

        private function startProgressAnimation():void {
            loading = true;
        }

        private function stopProgressAnimation():void {
            loading = false;
        }
        ]]></fx:Script>
    <s:Group left="0" right="0" top="0" bottom="0">
        <s:Image visible="{loading}" source="{inProgressImageUrl}" left="0" right="0" top="0" bottom="0"/>
        <s:Group visible="{!loading}" left="0" right="0" top="0" bottom="0">
            <s:Image visible="{imageData == null}" source="{imageUrl}" click="onClick(event)" left="0" right="0" top="0" bottom="0"></s:Image>
            <s:Image visible="{imageData != null}" source="{imageData}" click="onClick(event)" left="0" right="0" top="0" bottom="0"></s:Image>
        </s:Group>
    </s:Group>
    <s:Button label="upload" click="push()"></s:Button>
</s:Application>